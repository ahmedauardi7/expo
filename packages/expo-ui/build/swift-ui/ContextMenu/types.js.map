{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/swift-ui/ContextMenu/types.ts"],"names":[],"mappings":"","sourcesContent":["import { ComponentType, Children, ReactElement, ReactNode, useMemo } from 'react';\nimport { NativeSyntheticEvent, StyleProp, ViewStyle } from 'react-native';\n\nimport { ButtonProps } from '../Button';\nimport { PickerProps } from '../Picker';\nimport { SwitchProps } from '../Switch';\n\ntype SubmenuElement =\n  | ReactElement<ButtonProps>\n  | ReactElement<SwitchProps>\n  | ReactElement<PickerProps>\n  | ReactElement<SubmenuProps>;\n\nexport type ContextMenuContentProps = {\n  children: SubmenuElement | SubmenuElement[];\n};\n\n/**\n * @hidden\n */\nexport type EventHandlers = Record<\n  string,\n  Record<string, (event: NativeSyntheticEvent<any>) => void>\n>;\n\n/**\n * @hidden\n */\nexport type ContextMenuElementBase = { contextMenuElementID: string };\n\n\n/**\n * Activation method of the context menu.\n * - `singlePress`: The context menu is opened with a single tap. Does not isolate the content.\n * - `longPress`: The context menu is opened with a long press. On iOS additionally Highlights the content by blurring the background.\n */\nexport type ActivationMethod = 'singlePress' | 'longPress';\n\n/**\n * Props of the `ContextMenu` component.\n */\nexport type ContextMenuProps = {\n  /**\n   * Determines how the context menu will be activated.\n   */\n  activationMethod?: ActivationMethod;\n\n  /**\n   * The contents of the submenu are used as an anchor for the context menu.\n   * The children will be wrapped in a pressable element, which triggers opening of the context menu.\n   */\n  children: ReactNode;\n\n  /**\n   * Optional styles to apply to the `ContextMenu`.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Props of the `Submenu` component.\n */\nexport type SubmenuProps = {\n  /**\n   * The button that will be used to expand the submenu. On Android the `text` prop of the `Button` will be used as a section title.\n   */\n  button: ReactElement<ButtonProps>;\n  /**\n   * Children of the submenu. Only `Button`, `Switch`, `Picker` and `Submenu` elements should be used.\n   */\n  children: ReactNode;\n};\n\n/**\n * @hidden\n */\nexport type NativeMenuProps = ContextMenuProps & {\n  elements: MenuElement[];\n  onContextMenuButtonPressed: (\n    event: NativeSyntheticEvent<{ contextMenuElementID: string }>\n  ) => void;\n  onContextMenuSwitchValueChanged: (\n    event: NativeSyntheticEvent<{\n      contextMenuElementID: string;\n      value: boolean;\n    }>\n  ) => void;\n  onContextMenuPickerOptionSelected: (\n    event: NativeSyntheticEvent<{\n      index: number;\n      label: string;\n      contextMenuElementID: string;\n    }>\n  ) => void;\n};\n"]}